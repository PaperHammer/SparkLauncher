<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<OutputType>WinExe</OutputType>
		<TargetFramework>net8.0-windows10.0.19041.0</TargetFramework>
		<TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
		<RootNamespace>SparkLauncher.WinUI</RootNamespace>
		<ApplicationManifest>app.manifest</ApplicationManifest>
		<Platforms>x86;x64;ARM64</Platforms>
		<RuntimeIdentifiers Condition="$([MSBuild]::GetTargetFrameworkVersion('$(TargetFramework)')) &gt;= 8">win-x86;win-x64;win-arm64</RuntimeIdentifiers>
		<RuntimeIdentifiers Condition="$([MSBuild]::GetTargetFrameworkVersion('$(TargetFramework)')) &lt; 8">win10-x86;win10-x64;win10-arm64</RuntimeIdentifiers>
		<PublishProfile>win-$(Platform).pubxml</PublishProfile>
		<UseWinUI>true</UseWinUI>
		<EnableMsixTooling>true</EnableMsixTooling>
	</PropertyGroup>

	<!-- 导入签名工具任务 -->
	<!--<UsingTask TaskName="SparkLauncher.MSBuild.SignTool" AssemblyFile="$(SolutionDir)SparkLauncher\bin\Release\net8.0\SparkLauncher.dll" />-->

	<!--MSB4062	未能从程序集 SparkLauncher.dll 加载任务“SparkLauncher.MSBuild.SignTool”。
	Could not load file or assembly 'System.Runtime, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. 系统找不到指定的文件。-->

	<!--<Target Name="SignDlls" AfterTargets="Build" Condition="'$(Configuration)' == 'Release'">
		<ItemGroup>
			<DllsToSign Include="$(OutputPath)SparkLauncher*.dll" />
		</ItemGroup>

		<PropertyGroup>			
			<KeyOutputDir>$(OutputPath)keys</KeyOutputDir>
		</PropertyGroup>

		--><!-- 生成新密钥对 & 签名所有 DLL --><!--
		<SignTool KeyOutputDir="$(KeyOutput)" Files="@(DllsToSign)" />
	</Target>-->

	<Target Name="SignTool" AfterTargets="Build" Condition="'$(Configuration)' == 'Release'">
		<PropertyGroup>
			<ToolExe>D:\\Virtuals\\SparkLauncher\\src\\SparkLauncher.Test\\bin\\Release\\net8.0\\SparkLauncher.Test.exe</ToolExe>
		</PropertyGroup>

		<Error Condition="!Exists('$(ToolExe)')" Text="The tool at '$(ToolExe)' does not exist." />

		<Exec Command="$(ToolExe) $(OutputPath)">
			<Output TaskParameter="ExitCode" PropertyName="ToolExitCode" />
		</Exec>

		<Error Condition="'$(ToolExitCode)' != '0'" Text="The external tool exited with code $(ToolExitCode)." />
	</Target>

	<ItemGroup>
	  <None Remove="Views\TaskPipeLine.xaml" />
	</ItemGroup>

	<ItemGroup>
		<Content Include="Assets\SplashScreen.scale-200.png" />
		<Content Include="Assets\LockScreenLogo.scale-200.png" />
		<Content Include="Assets\Square150x150Logo.scale-200.png" />
		<Content Include="Assets\Square44x44Logo.scale-200.png" />
		<Content Include="Assets\Square44x44Logo.targetsize-24_altform-unplated.png" />
		<Content Include="Assets\StoreLogo.png" />
		<Content Include="Assets\Wide310x150Logo.scale-200.png" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="8.0.0" />
		<PackageReference Include="Microsoft.Extensions.Http" Version="8.0.0" />
		<PackageReference Include="Microsoft.Windows.SDK.BuildTools" Version="10.0.26100.1742" />
		<PackageReference Include="Microsoft.WindowsAppSDK" Version="1.6.241114003" />
		<PackageReference Include="WinUIEx" Version="2.5.0" />
		<Manifest Include="$(ApplicationManifest)" />
	</ItemGroup>

	<!--NETSDK1152-->
	<!--ref: https://learn.microsoft.com/zh-cn/dotnet/core/compatibility/sdk/6.0/duplicate-files-in-output-->
	<PropertyGroup>
		<ErrorOnDuplicatePublishOutputFiles>false</ErrorOnDuplicatePublishOutputFiles>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
	</PropertyGroup>

	<PropertyGroup Condition="'$(IsMsixRelease)' != 'true'">
		<!--<WindowsPackageType>None</WindowsPackageType>-->
		<WindowsAppSDKSelfContained>true</WindowsAppSDKSelfContained>
	</PropertyGroup>

	<PropertyGroup Condition="'$(IsMsixRelease)' == 'true'">
		<GenerateAppInstallerFile>False</GenerateAppInstallerFile>
		<AppxAutoIncrementPackageRevision>True</AppxAutoIncrementPackageRevision>
		<AppxSymbolPackageEnabled>False</AppxSymbolPackageEnabled>
		<GenerateTestArtifacts>True</GenerateTestArtifacts>
		<AppxBundle>Always</AppxBundle>
		<AppxBundlePlatforms>x64</AppxBundlePlatforms>
		<GenerateTemporaryStoreCertificate>True</GenerateTemporaryStoreCertificate>
		<HoursBetweenUpdateChecks>0</HoursBetweenUpdateChecks>
		<!-- Create Properties/PublishProfiles for each release, Example: win10-x86.pubxml-->
		<PublishProfile>win10-$(Platform).pubxml</PublishProfile>
		<!-- Temporary cert-->
		<!--
    <AppxPackageSigningEnabled>True</AppxPackageSigningEnabled>
    <PackageCertificateThumbprint>AFCC4AADFFAC311F4E8090D3AF1B8F278AB907BC</PackageCertificateThumbprint>
    <AppxPackageSigningTimestampDigestAlgorithm>SHA256</AppxPackageSigningTimestampDigestAlgorithm>
    -->
	</PropertyGroup>

	<!--
    Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
    Tools extension to be activated for this project even if the Windows App SDK Nuget
    package has not yet been restored.
  -->
	<ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
		<ProjectCapability Include="Msix" />
	</ItemGroup>
	<ItemGroup>
	  <ProjectReference Include="..\SparkLauncher.WinUI.UIComponent\SparkLauncher.WinUI.UIComponent.csproj" />
	</ItemGroup>
	<ItemGroup>
	  <Page Update="Views\TaskPipeLine.xaml">
	    <Generator>MSBuild:Compile</Generator>
	  </Page>
	</ItemGroup>

	<!--
    Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution
    Explorer "Package and Publish" context menu entry to be enabled for this project even if
    the Windows App SDK Nuget package has not yet been restored.
  -->
	<PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
		<HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
	</PropertyGroup>
</Project>